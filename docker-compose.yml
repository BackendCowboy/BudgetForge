services:
  # PostgreSQL Database (your existing setup enhanced)
  postgres:
    image: postgres:15-alpine
    container_name: budgetforge-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: budgetforge
      POSTGRES_USER: budgetforge_user
      POSTGRES_PASSWORD: your_secure_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    networks:
      - budgetforge-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U budgetforge_user -d budgetforge"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # BudgetForge API (your containerized application)
  api:
    build:
      context: .
      dockerfile: src/BudgetForge.Api/Dockerfile
      target: runtime
    container_name: budgetforge-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=budgetforge_v2;Username=budgetforge_user;Password=your_secure_password_123;Port=5432
    ports:
      - "18080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
      - budgetforge-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: budgetforge-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@budgetforge.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: budgetforge-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - budgetforge-monitoring
      - budgetforge-backend
    depends_on:
      - api

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: budgetforge-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    networks:
      - budgetforge-monitoring
    depends_on:
      - prometheus

  # Jenkins CI/CD Pipeline (Enhanced with Docker CLI and .NET SDK)
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: budgetforge-jenkins
    restart: unless-stopped
    user: root
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts:/scripts:ro
    networks:
      - budgetforge-backend
      - budgetforge-monitoring
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

# PostgreSQL Exporter - Exports PostgreSQL metrics to Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: budgetforge-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://budgetforge_user:your_secure_password_123@postgres:5432/budgetforge?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
      - budgetforge-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Node Exporter - Exports system metrics (CPU, memory, disk)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: budgetforge-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - budgetforge-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jenkins_data:
    driver: local

# Network segmentation for security
networks:
  budgetforge-backend:
    driver: bridge
    name: budgetforge-backend
  budgetforge-frontend:
    driver: bridge  
    name: budgetforge-frontend
  budgetforge-monitoring:
    driver: bridge
    name: budgetforge-monitoring