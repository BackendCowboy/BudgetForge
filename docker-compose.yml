
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: budgetforge-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    networks:
      - budgetforge-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # BudgetForge API
  api:
    build:
      context: .
      dockerfile: src/BudgetForge.Api/Dockerfile
      target: runtime
    container_name: budgetforge-api
    restart: unless-stopped
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ENABLE_SWAGGER: "true"
      ConnectionStrings__DefaultConnection: ${DB_CONN}
    ports:
      - "18080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
      - budgetforge-frontend
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: budgetforge-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@budgetforge.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: budgetforge-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "19090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - budgetforge-monitoring
      - budgetforge-backend
    depends_on:
      - api

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: budgetforge-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./docker-data/grafana:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    networks:
      - budgetforge-monitoring
    depends_on:
      - prometheus

  # Jenkins
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: budgetforge-jenkins
    restart: unless-stopped
    user: root
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
      JAVA_OPTS: -Djenkins.install.runSetupWizard=false
      JENKINS_ADMIN_USER: admin
      JENKINS_ADMIN_PASS: admin123
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - ./docker-data/jenkins:/var/jenkins_home
      - ./docker-data/jenkins/init.groovy.d:/var/jenkins_home/init.groovy.d:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts:/scripts:ro
    networks:
      - budgetforge-backend
      - budgetforge-monitoring
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: budgetforge-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - budgetforge-backend
      - budgetforge-monitoring
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: budgetforge-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - budgetforge-monitoring
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: budgetforge-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.listen-address=:9093"
    environment:
      ALERTMANAGER_SLACK_WEBHOOK: ${ALERTMANAGER_SLACK_WEBHOOK}
    volumes:
      - ./docker/alertmanager:/etc/alertmanager
    networks:
      - budgetforge-monitoring
    #Redis
  redis:
    image: redis:7-alpine
    container_name: budgetforge-redis
    command: ["redis-server", "--appendonly", "yes"]  # enables AOF persistence
    ports:
      - "6379:6379"
    volumes:
      - ./docker-data/redis:/data
    networks:
      - budgetforge-backend
volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:

networks:
  budgetforge-backend:
  budgetforge-frontend:
  budgetforge-monitoring: